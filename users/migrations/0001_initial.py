# Generated by Django 4.1.4 on 2023-01-15 15:20

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Почта')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Фамилия')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации')),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Client', 'Client'), ('Moderator', 'Moderator')], default='Client', max_length=9, verbose_name='Роль пользователя')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', users.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClientUniqueProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nm_id', models.BigIntegerField(verbose_name='Артикул')),
                ('brand', models.CharField(max_length=65, verbose_name='Бренд')),
                ('image', models.URLField(null=True, verbose_name='Картинка товара')),
                ('product_name', models.CharField(max_length=125, null=True, verbose_name='Наименование продукта')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
            },
        ),
        migrations.CreateModel(
            name='WBApiKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.TextField(max_length=655, validators=[django.core.validators.RegexValidator('^[^а-яА-Я]*$', 'Символы кириллицы в API ключе недопустимы')], verbose_name='API ключ Wildberries')),
                ('name', models.CharField(max_length=65, verbose_name='Название компании продавца')),
                ('is_current', models.BooleanField(default=True, verbose_name='Является ли веб ключ текущим')),
                ('is_wb_data_loaded', models.BooleanField(default=False, verbose_name='Загружен ли самый первый отчёт')),
                ('is_products_loaded', models.BooleanField(default=False, verbose_name='Загружен ли первоначальный список товаров')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='keys', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'API ключ',
                'verbose_name_plural': 'API ключи',
                'ordering': ['user'],
            },
        ),
        migrations.CreateModel(
            name='TaxRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tax_rate', models.FloatField(default=0)),
                ('commencement_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('api_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taxes', to='users.wbapikey', verbose_name='API ключ компании')),
            ],
            options={
                'verbose_name': 'Ставка налога',
                'verbose_name_plural': 'Ставки налога',
                'ordering': ['commencement_date'],
            },
        ),
        migrations.CreateModel(
            name='SaleReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realizationreport_id', models.BigIntegerField(verbose_name='Номер отчёта')),
                ('week_num', models.IntegerField(verbose_name='Номер недели')),
                ('unique_week_uuid', models.UUIDField()),
                ('month_num', models.IntegerField(verbose_name='Номер месяца')),
                ('create_dt', models.DateTimeField(verbose_name='Дата формирования отчёта')),
                ('date_from', models.DateTimeField(verbose_name='Дата начала отчетного периода')),
                ('date_to', models.DateTimeField(verbose_name='Дата конца отчетного периода')),
                ('storage_cost', models.FloatField(blank=True, null=True, verbose_name='Стоимость хранения')),
                ('cost_paid_acceptance', models.FloatField(blank=True, null=True, verbose_name='Стоимость платной приёмки')),
                ('other_deductions', models.FloatField(blank=True, null=True, verbose_name='Прочие удержания')),
                ('supplier_costs', models.FloatField(blank=True, null=True, verbose_name='Расходы поставщка')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания в базе данных')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления в базе данных')),
                ('api_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_key_reports', to='users.wbapikey', verbose_name='Апи ключ')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reports', to=settings.AUTH_USER_MODEL, verbose_name='Владелец отчёта')),
            ],
            options={
                'verbose_name': 'Отчёт',
                'verbose_name_plural': 'Отчёты',
                'ordering': ['owner', '-create_dt'],
            },
        ),
        migrations.CreateModel(
            name='SaleObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('realizationreport_id', models.BigIntegerField(verbose_name='Номер отчёта')),
                ('week_num', models.IntegerField(verbose_name='Номер недели')),
                ('month_num', models.IntegerField(verbose_name='Номер месяца')),
                ('date_from', models.DateTimeField(verbose_name='Дата начала отчетного периода')),
                ('date_to', models.DateTimeField(verbose_name='Дата конца отчетного периода')),
                ('create_dt', models.DateTimeField(verbose_name='Дата формирования отчёта')),
                ('gi_id', models.BigIntegerField(verbose_name='Номер поставки')),
                ('subject_name', models.CharField(max_length=125, verbose_name='Предмет')),
                ('nm_id', models.BigIntegerField(verbose_name='Артикул')),
                ('brand_name', models.CharField(max_length=125, verbose_name='Бренд')),
                ('sa_name', models.CharField(max_length=65, verbose_name='Артикул поставщика')),
                ('ts_name', models.CharField(max_length=65, verbose_name='Размер')),
                ('barcode', models.CharField(max_length=125, verbose_name='Бар-код')),
                ('doc_type_name', models.CharField(max_length=65, verbose_name='Тип документа')),
                ('order_dt', models.DateTimeField(verbose_name='Дата заказа')),
                ('sale_dt', models.DateTimeField(verbose_name='Дата продажи')),
                ('quantity', models.IntegerField(verbose_name='Количество')),
                ('retail_price', models.FloatField(verbose_name='Цена розничная')),
                ('retail_price_withdisc_rub', models.FloatField(verbose_name='Цена розничная с учетом согласованной скидки')),
                ('ppvz_for_pay', models.FloatField(verbose_name='К перечислению продавцу за реализованный товар')),
                ('penalty', models.FloatField(verbose_name='Штрафы')),
                ('additional_payment', models.FloatField(verbose_name='Доплаты')),
                ('site_country', models.CharField(max_length=65, verbose_name='Страна продажи')),
                ('office_name', models.CharField(max_length=65, null=True, verbose_name='Склад')),
                ('srid', models.CharField(max_length=225, verbose_name='Уникальный идентификатор заказа')),
                ('delivery_rub', models.FloatField(verbose_name='Стоимость логистики')),
                ('rid', models.BigIntegerField(verbose_name='Уникальный идентификатор позиции заказа')),
                ('supplier_oper_name', models.CharField(max_length=125, verbose_name='Обоснование для оплаты')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания в базе данных')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления в базе данных')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Продажа',
                'verbose_name_plural': 'Продажи',
            },
        ),
        migrations.CreateModel(
            name='NetCost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0)),
                ('cost_date', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cost_prices', to='users.clientuniqueproduct', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Значение себестоимости',
                'verbose_name_plural': 'Значения себестоимостей',
            },
        ),
        migrations.AddField(
            model_name='clientuniqueproduct',
            name='api_key',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_key_products', to='users.wbapikey', verbose_name='Апи ключ'),
        ),
        migrations.AddField(
            model_name='clientuniqueproduct',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AddConstraint(
            model_name='wbapikey',
            constraint=models.UniqueConstraint(condition=models.Q(('is_current', True)), fields=('is_current', 'user'), name='unique_is_current'),
        ),
    ]
